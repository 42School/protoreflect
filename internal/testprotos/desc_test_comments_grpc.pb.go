// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package testprotos

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RpcServiceClient is the client API for RpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcServiceClient interface {
	// Method comment
	StreamingRpc(ctx context.Context, opts ...grpc.CallOption) (RpcService_StreamingRpcClient, error)
	// Deprecated: Do not use.
	UnaryRpc(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
}

type rpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcServiceClient(cc grpc.ClientConnInterface) RpcServiceClient {
	return &rpcServiceClient{cc}
}

func (c *rpcServiceClient) StreamingRpc(ctx context.Context, opts ...grpc.CallOption) (RpcService_StreamingRpcClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RpcService_serviceDesc.Streams[0], "/foo.bar.RpcService/StreamingRpc", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcServiceStreamingRpcClient{stream}
	return x, nil
}

type RpcService_StreamingRpcClient interface {
	Send(*Request) error
	CloseAndRecv() (*Request, error)
	grpc.ClientStream
}

type rpcServiceStreamingRpcClient struct {
	grpc.ClientStream
}

func (x *rpcServiceStreamingRpcClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcServiceStreamingRpcClient) CloseAndRecv() (*Request, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Request)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *rpcServiceClient) UnaryRpc(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/foo.bar.RpcService/UnaryRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcServiceServer is the server API for RpcService service.
type RpcServiceServer interface {
	// Method comment
	StreamingRpc(RpcService_StreamingRpcServer) error
	// Deprecated: Do not use.
	UnaryRpc(context.Context, *Request) (*empty.Empty, error)
}

// UnimplementedRpcServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRpcServiceServer struct {
}

func (*UnimplementedRpcServiceServer) StreamingRpc(RpcService_StreamingRpcServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingRpc not implemented")
}
func (*UnimplementedRpcServiceServer) UnaryRpc(context.Context, *Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryRpc not implemented")
}

func RegisterRpcServiceServer(s *grpc.Server, srv RpcServiceServer) {
	s.RegisterService(&_RpcService_serviceDesc, srv)
}

func _RpcService_StreamingRpc_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServiceServer).StreamingRpc(&rpcServiceStreamingRpcServer{stream})
}

type RpcService_StreamingRpcServer interface {
	SendAndClose(*Request) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type rpcServiceStreamingRpcServer struct {
	grpc.ServerStream
}

func (x *rpcServiceStreamingRpcServer) SendAndClose(m *Request) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcServiceStreamingRpcServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RpcService_UnaryRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServiceServer).UnaryRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foo.bar.RpcService/UnaryRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServiceServer).UnaryRpc(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "foo.bar.RpcService",
	HandlerType: (*RpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryRpc",
			Handler:    _RpcService_UnaryRpc_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingRpc",
			Handler:       _RpcService_StreamingRpc_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "desc_test_comments.proto",
}
