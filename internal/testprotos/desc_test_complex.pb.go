// Code generated by protoc-gen-go. DO NOT EDIT.
// source: desc_test_complex.proto

package testprotos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/protoc-gen-go/descriptor"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Test_Nested__NestedNested_EEE int32

const (
	Test_Nested__NestedNested_OK Test_Nested__NestedNested_EEE = 0
	Test_Nested__NestedNested_V1 Test_Nested__NestedNested_EEE = 1
	Test_Nested__NestedNested_V2 Test_Nested__NestedNested_EEE = 2
	Test_Nested__NestedNested_V3 Test_Nested__NestedNested_EEE = 3
	Test_Nested__NestedNested_V4 Test_Nested__NestedNested_EEE = 4
	Test_Nested__NestedNested_V5 Test_Nested__NestedNested_EEE = 5
	Test_Nested__NestedNested_V6 Test_Nested__NestedNested_EEE = 6
)

var Test_Nested__NestedNested_EEE_name = map[int32]string{
	0: "OK",
	1: "V1",
	2: "V2",
	3: "V3",
	4: "V4",
	5: "V5",
	6: "V6",
}
var Test_Nested__NestedNested_EEE_value = map[string]int32{
	"OK": 0,
	"V1": 1,
	"V2": 2,
	"V3": 3,
	"V4": 4,
	"V5": 5,
	"V6": 6,
}

func (x Test_Nested__NestedNested_EEE) Enum() *Test_Nested__NestedNested_EEE {
	p := new(Test_Nested__NestedNested_EEE)
	*p = x
	return p
}
func (x Test_Nested__NestedNested_EEE) String() string {
	return proto.EnumName(Test_Nested__NestedNested_EEE_name, int32(x))
}
func (x *Test_Nested__NestedNested_EEE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Test_Nested__NestedNested_EEE_value, data, "Test_Nested__NestedNested_EEE")
	if err != nil {
		return err
	}
	*x = Test_Nested__NestedNested_EEE(value)
	return nil
}
func (Test_Nested__NestedNested_EEE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{1, 1, 0, 0}
}

type Validator_Action int32

const (
	Validator_LOGIN Validator_Action = 0
	Validator_READ  Validator_Action = 1
	Validator_WRITE Validator_Action = 2
)

var Validator_Action_name = map[int32]string{
	0: "LOGIN",
	1: "READ",
	2: "WRITE",
}
var Validator_Action_value = map[string]int32{
	"LOGIN": 0,
	"READ":  1,
	"WRITE": 2,
}

func (x Validator_Action) Enum() *Validator_Action {
	p := new(Validator_Action)
	*p = x
	return p
}
func (x Validator_Action) String() string {
	return proto.EnumName(Validator_Action_name, int32(x))
}
func (x *Validator_Action) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Validator_Action_value, data, "Validator_Action")
	if err != nil {
		return err
	}
	*x = Validator_Action(value)
	return nil
}
func (Validator_Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{3, 0} }

type Simple struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id               *uint64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Simple) Reset()                    { *m = Simple{} }
func (m *Simple) String() string            { return proto.CompactTextString(m) }
func (*Simple) ProtoMessage()               {}
func (*Simple) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Simple) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Simple) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type Test struct {
	Foo                          *string          `protobuf:"bytes,1,opt,name=foo,json=|foo|" json:"foo,omitempty"`
	Array                        []int32          `protobuf:"varint,2,rep,name=array" json:"array,omitempty"`
	S                            *Simple          `protobuf:"bytes,3,opt,name=s" json:"s,omitempty"`
	R                            []*Simple        `protobuf:"bytes,4,rep,name=r" json:"r,omitempty"`
	M                            map[string]int32 `protobuf:"bytes,5,rep,name=m" json:"m,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	B                            []byte           `protobuf:"bytes,6,opt,name=b,def=\\000\\001\\002\\003\\004\\005\\006\\007fubar!" json:"b,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *Test) Reset()                    { *m = Test{} }
func (m *Test) String() string            { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()               {}
func (*Test) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

var extRange_Test = []proto.ExtensionRange{
	{100, 200},
	{300, 350},
	{500, 550},
}

func (*Test) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_Test
}

var Default_Test_B []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\afubar!")

func (m *Test) GetFoo() string {
	if m != nil && m.Foo != nil {
		return *m.Foo
	}
	return ""
}

func (m *Test) GetArray() []int32 {
	if m != nil {
		return m.Array
	}
	return nil
}

func (m *Test) GetS() *Simple {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *Test) GetR() []*Simple {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *Test) GetM() map[string]int32 {
	if m != nil {
		return m.M
	}
	return nil
}

func (m *Test) GetB() []byte {
	if m != nil && m.B != nil {
		return m.B
	}
	return append([]byte(nil), Default_Test_B...)
}

type Test_Nested struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Test_Nested) Reset()                    { *m = Test_Nested{} }
func (m *Test_Nested) String() string            { return proto.CompactTextString(m) }
func (*Test_Nested) ProtoMessage()               {}
func (*Test_Nested) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1, 1} }

var E_Test_Nested_Fooblez = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.MessageOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         20003,
	Name:          "foo.bar.Test.Nested.fooblez",
	Tag:           "varint,20003,opt,name=fooblez",
	Filename:      "desc_test_complex.proto",
}

type Test_Nested__NestedNested struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Test_Nested__NestedNested) Reset()                    { *m = Test_Nested__NestedNested{} }
func (m *Test_Nested__NestedNested) String() string            { return proto.CompactTextString(m) }
func (*Test_Nested__NestedNested) ProtoMessage()               {}
func (*Test_Nested__NestedNested) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1, 1, 0} }

var E_Test_Nested_XNestedNested_XGarblez = &proto.ExtensionDesc{
	ExtendedType:  (*Test)(nil),
	ExtensionType: (*string)(nil),
	Field:         100,
	Name:          "foo.bar.Test.Nested._NestedNested._garblez",
	Tag:           "bytes,100,opt,name=_garblez,json=Garblez",
	Filename:      "desc_test_complex.proto",
}

type Test_Nested__NestedNested_NestedNestedNested struct {
	Test             *Test  `protobuf:"bytes,1,opt,name=Test" json:"Test,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Test_Nested__NestedNested_NestedNestedNested) Reset() {
	*m = Test_Nested__NestedNested_NestedNestedNested{}
}
func (m *Test_Nested__NestedNested_NestedNestedNested) String() string {
	return proto.CompactTextString(m)
}
func (*Test_Nested__NestedNested_NestedNestedNested) ProtoMessage() {}
func (*Test_Nested__NestedNested_NestedNestedNested) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{1, 1, 0, 0}
}

func (m *Test_Nested__NestedNested_NestedNestedNested) GetTest() *Test {
	if m != nil {
		return m.Test
	}
	return nil
}

type Another struct {
	Test             *Test                          `protobuf:"bytes,1,opt,name=test" json:"test,omitempty"`
	Fff              *Test_Nested__NestedNested_EEE `protobuf:"varint,2,opt,name=fff,enum=foo.bar.Test_Nested__NestedNested_EEE,def=1" json:"fff,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *Another) Reset()                    { *m = Another{} }
func (m *Another) String() string            { return proto.CompactTextString(m) }
func (*Another) ProtoMessage()               {}
func (*Another) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

const Default_Another_Fff Test_Nested__NestedNested_EEE = Test_Nested__NestedNested_V1

func (m *Another) GetTest() *Test {
	if m != nil {
		return m.Test
	}
	return nil
}

func (m *Another) GetFff() Test_Nested__NestedNested_EEE {
	if m != nil && m.Fff != nil {
		return *m.Fff
	}
	return Default_Another_Fff
}

type Validator struct {
	Authenticated    *bool                   `protobuf:"varint,1,opt,name=authenticated" json:"authenticated,omitempty"`
	Permission       []*Validator_Permission `protobuf:"bytes,2,rep,name=permission" json:"permission,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *Validator) Reset()                    { *m = Validator{} }
func (m *Validator) String() string            { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()               {}
func (*Validator) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Validator) GetAuthenticated() bool {
	if m != nil && m.Authenticated != nil {
		return *m.Authenticated
	}
	return false
}

func (m *Validator) GetPermission() []*Validator_Permission {
	if m != nil {
		return m.Permission
	}
	return nil
}

type Validator_Permission struct {
	Action           *Validator_Action `protobuf:"varint,1,opt,name=action,enum=foo.bar.Validator_Action" json:"action,omitempty"`
	Entity           *string           `protobuf:"bytes,2,opt,name=entity" json:"entity,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Validator_Permission) Reset()                    { *m = Validator_Permission{} }
func (m *Validator_Permission) String() string            { return proto.CompactTextString(m) }
func (*Validator_Permission) ProtoMessage()               {}
func (*Validator_Permission) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3, 0} }

func (m *Validator_Permission) GetAction() Validator_Action {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return Validator_LOGIN
}

func (m *Validator_Permission) GetEntity() string {
	if m != nil && m.Entity != nil {
		return *m.Entity
	}
	return ""
}

type Rule struct {
	// Types that are valid to be assigned to Rule:
	//	*Rule_String_
	//	*Rule_Repeated
	//	*Rule_Int
	Rule             isRule_Rule `protobuf_oneof:"rule"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Rule) Reset()                    { *m = Rule{} }
func (m *Rule) String() string            { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()               {}
func (*Rule) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

type isRule_Rule interface {
	isRule_Rule()
}

type Rule_String_ struct {
	String_ *Rule_StringRule `protobuf:"bytes,1,opt,name=string,oneof"`
}
type Rule_Repeated struct {
	Repeated *Rule_RepeatedRule `protobuf:"bytes,2,opt,name=repeated,oneof"`
}
type Rule_Int struct {
	Int *Rule_IntRule `protobuf:"bytes,3,opt,name=int,oneof"`
}

func (*Rule_String_) isRule_Rule()  {}
func (*Rule_Repeated) isRule_Rule() {}
func (*Rule_Int) isRule_Rule()      {}

func (m *Rule) GetRule() isRule_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *Rule) GetString_() *Rule_StringRule {
	if x, ok := m.GetRule().(*Rule_String_); ok {
		return x.String_
	}
	return nil
}

func (m *Rule) GetRepeated() *Rule_RepeatedRule {
	if x, ok := m.GetRule().(*Rule_Repeated); ok {
		return x.Repeated
	}
	return nil
}

func (m *Rule) GetInt() *Rule_IntRule {
	if x, ok := m.GetRule().(*Rule_Int); ok {
		return x.Int
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Rule) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Rule_OneofMarshaler, _Rule_OneofUnmarshaler, _Rule_OneofSizer, []interface{}{
		(*Rule_String_)(nil),
		(*Rule_Repeated)(nil),
		(*Rule_Int)(nil),
	}
}

func _Rule_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Rule)
	// rule
	switch x := m.Rule.(type) {
	case *Rule_String_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.String_); err != nil {
			return err
		}
	case *Rule_Repeated:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Repeated); err != nil {
			return err
		}
	case *Rule_Int:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Rule.Rule has unexpected type %T", x)
	}
	return nil
}

func _Rule_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Rule)
	switch tag {
	case 1: // rule.string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Rule_StringRule)
		err := b.DecodeMessage(msg)
		m.Rule = &Rule_String_{msg}
		return true, err
	case 2: // rule.repeated
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Rule_RepeatedRule)
		err := b.DecodeMessage(msg)
		m.Rule = &Rule_Repeated{msg}
		return true, err
	case 3: // rule.int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Rule_IntRule)
		err := b.DecodeMessage(msg)
		m.Rule = &Rule_Int{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Rule_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Rule)
	// rule
	switch x := m.Rule.(type) {
	case *Rule_String_:
		s := proto.Size(x.String_)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Rule_Repeated:
		s := proto.Size(x.Repeated)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Rule_Int:
		s := proto.Size(x.Int)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Rule_StringRule struct {
	Pattern          *string `protobuf:"bytes,1,opt,name=pattern" json:"pattern,omitempty"`
	AllowEmpty       *bool   `protobuf:"varint,2,opt,name=allow_empty,json=allowEmpty" json:"allow_empty,omitempty"`
	MinLen           *int32  `protobuf:"varint,3,opt,name=min_len,json=minLen" json:"min_len,omitempty"`
	MaxLen           *int32  `protobuf:"varint,4,opt,name=max_len,json=maxLen" json:"max_len,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Rule_StringRule) Reset()                    { *m = Rule_StringRule{} }
func (m *Rule_StringRule) String() string            { return proto.CompactTextString(m) }
func (*Rule_StringRule) ProtoMessage()               {}
func (*Rule_StringRule) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4, 0} }

func (m *Rule_StringRule) GetPattern() string {
	if m != nil && m.Pattern != nil {
		return *m.Pattern
	}
	return ""
}

func (m *Rule_StringRule) GetAllowEmpty() bool {
	if m != nil && m.AllowEmpty != nil {
		return *m.AllowEmpty
	}
	return false
}

func (m *Rule_StringRule) GetMinLen() int32 {
	if m != nil && m.MinLen != nil {
		return *m.MinLen
	}
	return 0
}

func (m *Rule_StringRule) GetMaxLen() int32 {
	if m != nil && m.MaxLen != nil {
		return *m.MaxLen
	}
	return 0
}

type Rule_IntRule struct {
	MinVal           *int64  `protobuf:"varint,1,opt,name=min_val,json=minVal" json:"min_val,omitempty"`
	MaxVal           *uint64 `protobuf:"varint,2,opt,name=max_val,json=maxVal" json:"max_val,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Rule_IntRule) Reset()                    { *m = Rule_IntRule{} }
func (m *Rule_IntRule) String() string            { return proto.CompactTextString(m) }
func (*Rule_IntRule) ProtoMessage()               {}
func (*Rule_IntRule) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4, 1} }

func (m *Rule_IntRule) GetMinVal() int64 {
	if m != nil && m.MinVal != nil {
		return *m.MinVal
	}
	return 0
}

func (m *Rule_IntRule) GetMaxVal() uint64 {
	if m != nil && m.MaxVal != nil {
		return *m.MaxVal
	}
	return 0
}

type Rule_RepeatedRule struct {
	AllowEmpty       *bool  `protobuf:"varint,1,opt,name=allow_empty,json=allowEmpty" json:"allow_empty,omitempty"`
	MinItems         *int32 `protobuf:"varint,2,opt,name=min_items,json=minItems" json:"min_items,omitempty"`
	MaxItems         *int32 `protobuf:"varint,3,opt,name=max_items,json=maxItems" json:"max_items,omitempty"`
	Items            *Rule  `protobuf:"bytes,4,opt,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Rule_RepeatedRule) Reset()                    { *m = Rule_RepeatedRule{} }
func (m *Rule_RepeatedRule) String() string            { return proto.CompactTextString(m) }
func (*Rule_RepeatedRule) ProtoMessage()               {}
func (*Rule_RepeatedRule) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4, 2} }

func (m *Rule_RepeatedRule) GetAllowEmpty() bool {
	if m != nil && m.AllowEmpty != nil {
		return *m.AllowEmpty
	}
	return false
}

func (m *Rule_RepeatedRule) GetMinItems() int32 {
	if m != nil && m.MinItems != nil {
		return *m.MinItems
	}
	return 0
}

func (m *Rule_RepeatedRule) GetMaxItems() int32 {
	if m != nil && m.MaxItems != nil {
		return *m.MaxItems
	}
	return 0
}

func (m *Rule_RepeatedRule) GetItems() *Rule {
	if m != nil {
		return m.Items
	}
	return nil
}

type IsAuthorizedReq struct {
	Subjects         []string `protobuf:"bytes,1,rep,name=subjects" json:"subjects,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *IsAuthorizedReq) Reset()                    { *m = IsAuthorizedReq{} }
func (m *IsAuthorizedReq) String() string            { return proto.CompactTextString(m) }
func (*IsAuthorizedReq) ProtoMessage()               {}
func (*IsAuthorizedReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *IsAuthorizedReq) GetSubjects() []string {
	if m != nil {
		return m.Subjects
	}
	return nil
}

type KeywordCollisions struct {
	Syntax           *bool    `protobuf:"varint,1,opt,name=syntax" json:"syntax,omitempty"`
	Import           *bool    `protobuf:"varint,2,opt,name=import" json:"import,omitempty"`
	Public           *bool    `protobuf:"varint,3,opt,name=public" json:"public,omitempty"`
	Weak             *bool    `protobuf:"varint,4,opt,name=weak" json:"weak,omitempty"`
	Package          *bool    `protobuf:"varint,5,opt,name=package" json:"package,omitempty"`
	String_          *string  `protobuf:"bytes,6,opt,name=string" json:"string,omitempty"`
	Bytes            []byte   `protobuf:"bytes,7,opt,name=bytes" json:"bytes,omitempty"`
	Int32            *int32   `protobuf:"varint,8,opt,name=int32" json:"int32,omitempty"`
	Int64            *int64   `protobuf:"varint,9,opt,name=int64" json:"int64,omitempty"`
	Uint32           *uint32  `protobuf:"varint,10,opt,name=uint32" json:"uint32,omitempty"`
	Uint64           *uint64  `protobuf:"varint,11,opt,name=uint64" json:"uint64,omitempty"`
	Sint32           *int32   `protobuf:"zigzag32,12,opt,name=sint32" json:"sint32,omitempty"`
	Sint64           *int64   `protobuf:"zigzag64,13,opt,name=sint64" json:"sint64,omitempty"`
	Fixed32          *uint32  `protobuf:"fixed32,14,opt,name=fixed32" json:"fixed32,omitempty"`
	Fixed64          *uint64  `protobuf:"fixed64,15,opt,name=fixed64" json:"fixed64,omitempty"`
	Sfixed32         *int32   `protobuf:"fixed32,16,opt,name=sfixed32" json:"sfixed32,omitempty"`
	Sfixed64         *int64   `protobuf:"fixed64,17,opt,name=sfixed64" json:"sfixed64,omitempty"`
	Bool             *bool    `protobuf:"varint,18,opt,name=bool" json:"bool,omitempty"`
	Float            *float32 `protobuf:"fixed32,19,opt,name=float" json:"float,omitempty"`
	Double           *float64 `protobuf:"fixed64,20,opt,name=double" json:"double,omitempty"`
	Optional         *bool    `protobuf:"varint,21,opt,name=optional" json:"optional,omitempty"`
	Repeated         *bool    `protobuf:"varint,22,opt,name=repeated" json:"repeated,omitempty"`
	Required         *bool    `protobuf:"varint,23,opt,name=required" json:"required,omitempty"`
	Message          *bool    `protobuf:"varint,24,opt,name=message" json:"message,omitempty"`
	Enum             *bool    `protobuf:"varint,25,opt,name=enum" json:"enum,omitempty"`
	Service          *bool    `protobuf:"varint,26,opt,name=service" json:"service,omitempty"`
	Rpc              *bool    `protobuf:"varint,27,opt,name=rpc" json:"rpc,omitempty"`
	Option           *bool    `protobuf:"varint,28,opt,name=option" json:"option,omitempty"`
	Extend           *bool    `protobuf:"varint,29,opt,name=extend" json:"extend,omitempty"`
	Extensions       *bool    `protobuf:"varint,30,opt,name=extensions" json:"extensions,omitempty"`
	Reserved         *bool    `protobuf:"varint,31,opt,name=reserved" json:"reserved,omitempty"`
	To               *bool    `protobuf:"varint,32,opt,name=to" json:"to,omitempty"`
	True             *int32   `protobuf:"varint,33,opt,name=true" json:"true,omitempty"`
	False            *int32   `protobuf:"varint,34,opt,name=false" json:"false,omitempty"`
	Default          *int32   `protobuf:"varint,35,opt,name=default" json:"default,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *KeywordCollisions) Reset()                    { *m = KeywordCollisions{} }
func (m *KeywordCollisions) String() string            { return proto.CompactTextString(m) }
func (*KeywordCollisions) ProtoMessage()               {}
func (*KeywordCollisions) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *KeywordCollisions) GetSyntax() bool {
	if m != nil && m.Syntax != nil {
		return *m.Syntax
	}
	return false
}

func (m *KeywordCollisions) GetImport() bool {
	if m != nil && m.Import != nil {
		return *m.Import
	}
	return false
}

func (m *KeywordCollisions) GetPublic() bool {
	if m != nil && m.Public != nil {
		return *m.Public
	}
	return false
}

func (m *KeywordCollisions) GetWeak() bool {
	if m != nil && m.Weak != nil {
		return *m.Weak
	}
	return false
}

func (m *KeywordCollisions) GetPackage() bool {
	if m != nil && m.Package != nil {
		return *m.Package
	}
	return false
}

func (m *KeywordCollisions) GetString_() string {
	if m != nil && m.String_ != nil {
		return *m.String_
	}
	return ""
}

func (m *KeywordCollisions) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *KeywordCollisions) GetInt32() int32 {
	if m != nil && m.Int32 != nil {
		return *m.Int32
	}
	return 0
}

func (m *KeywordCollisions) GetInt64() int64 {
	if m != nil && m.Int64 != nil {
		return *m.Int64
	}
	return 0
}

func (m *KeywordCollisions) GetUint32() uint32 {
	if m != nil && m.Uint32 != nil {
		return *m.Uint32
	}
	return 0
}

func (m *KeywordCollisions) GetUint64() uint64 {
	if m != nil && m.Uint64 != nil {
		return *m.Uint64
	}
	return 0
}

func (m *KeywordCollisions) GetSint32() int32 {
	if m != nil && m.Sint32 != nil {
		return *m.Sint32
	}
	return 0
}

func (m *KeywordCollisions) GetSint64() int64 {
	if m != nil && m.Sint64 != nil {
		return *m.Sint64
	}
	return 0
}

func (m *KeywordCollisions) GetFixed32() uint32 {
	if m != nil && m.Fixed32 != nil {
		return *m.Fixed32
	}
	return 0
}

func (m *KeywordCollisions) GetFixed64() uint64 {
	if m != nil && m.Fixed64 != nil {
		return *m.Fixed64
	}
	return 0
}

func (m *KeywordCollisions) GetSfixed32() int32 {
	if m != nil && m.Sfixed32 != nil {
		return *m.Sfixed32
	}
	return 0
}

func (m *KeywordCollisions) GetSfixed64() int64 {
	if m != nil && m.Sfixed64 != nil {
		return *m.Sfixed64
	}
	return 0
}

func (m *KeywordCollisions) GetBool() bool {
	if m != nil && m.Bool != nil {
		return *m.Bool
	}
	return false
}

func (m *KeywordCollisions) GetFloat() float32 {
	if m != nil && m.Float != nil {
		return *m.Float
	}
	return 0
}

func (m *KeywordCollisions) GetDouble() float64 {
	if m != nil && m.Double != nil {
		return *m.Double
	}
	return 0
}

func (m *KeywordCollisions) GetOptional() bool {
	if m != nil && m.Optional != nil {
		return *m.Optional
	}
	return false
}

func (m *KeywordCollisions) GetRepeated() bool {
	if m != nil && m.Repeated != nil {
		return *m.Repeated
	}
	return false
}

func (m *KeywordCollisions) GetRequired() bool {
	if m != nil && m.Required != nil {
		return *m.Required
	}
	return false
}

func (m *KeywordCollisions) GetMessage() bool {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return false
}

func (m *KeywordCollisions) GetEnum() bool {
	if m != nil && m.Enum != nil {
		return *m.Enum
	}
	return false
}

func (m *KeywordCollisions) GetService() bool {
	if m != nil && m.Service != nil {
		return *m.Service
	}
	return false
}

func (m *KeywordCollisions) GetRpc() bool {
	if m != nil && m.Rpc != nil {
		return *m.Rpc
	}
	return false
}

func (m *KeywordCollisions) GetOption() bool {
	if m != nil && m.Option != nil {
		return *m.Option
	}
	return false
}

func (m *KeywordCollisions) GetExtend() bool {
	if m != nil && m.Extend != nil {
		return *m.Extend
	}
	return false
}

func (m *KeywordCollisions) GetExtensions() bool {
	if m != nil && m.Extensions != nil {
		return *m.Extensions
	}
	return false
}

func (m *KeywordCollisions) GetReserved() bool {
	if m != nil && m.Reserved != nil {
		return *m.Reserved
	}
	return false
}

func (m *KeywordCollisions) GetTo() bool {
	if m != nil && m.To != nil {
		return *m.To
	}
	return false
}

func (m *KeywordCollisions) GetTrue() int32 {
	if m != nil && m.True != nil {
		return *m.True
	}
	return 0
}

func (m *KeywordCollisions) GetFalse() int32 {
	if m != nil && m.False != nil {
		return *m.False
	}
	return 0
}

func (m *KeywordCollisions) GetDefault() int32 {
	if m != nil && m.Default != nil {
		return *m.Default
	}
	return 0
}

type KeywordCollisionOptions struct {
	Id               *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeywordCollisionOptions) Reset()                    { *m = KeywordCollisionOptions{} }
func (m *KeywordCollisionOptions) String() string            { return proto.CompactTextString(m) }
func (*KeywordCollisionOptions) ProtoMessage()               {}
func (*KeywordCollisionOptions) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *KeywordCollisionOptions) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *KeywordCollisionOptions) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

var E_Label = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.ExtensionRangeOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         20000,
	Name:          "foo.bar.label",
	Tag:           "bytes,20000,opt,name=label",
	Filename:      "desc_test_complex.proto",
}

var E_Rept = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.MessageOptions)(nil),
	ExtensionType: ([]*Test)(nil),
	Field:         20002,
	Name:          "foo.bar.rept",
	Tag:           "bytes,20002,rep,name=rept",
	Filename:      "desc_test_complex.proto",
}

var E_Eee = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.MessageOptions)(nil),
	ExtensionType: (*Test_Nested__NestedNested_EEE)(nil),
	Field:         20010,
	Name:          "foo.bar.eee",
	Tag:           "varint,20010,opt,name=eee,enum=foo.bar.Test_Nested__NestedNested_EEE",
	Filename:      "desc_test_complex.proto",
}

var E_A = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.MessageOptions)(nil),
	ExtensionType: (*Another)(nil),
	Field:         20020,
	Name:          "foo.bar.a",
	Tag:           "bytes,20020,opt,name=a",
	Filename:      "desc_test_complex.proto",
}

var E_Validator = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.MethodOptions)(nil),
	ExtensionType: (*Validator)(nil),
	Field:         12345,
	Name:          "foo.bar.validator",
	Tag:           "bytes,12345,opt,name=validator",
	Filename:      "desc_test_complex.proto",
}

var E_Rules = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*Rule)(nil),
	Field:         1234,
	Name:          "foo.bar.rules",
	Tag:           "bytes,1234,opt,name=rules",
	Filename:      "desc_test_complex.proto",
}

var E_Syntax = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20001,
	Name:          "foo.bar.syntax",
	Tag:           "varint,20001,opt,name=syntax",
	Filename:      "desc_test_complex.proto",
}

var E_Import = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20002,
	Name:          "foo.bar.import",
	Tag:           "varint,20002,opt,name=import",
	Filename:      "desc_test_complex.proto",
}

var E_Public = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20003,
	Name:          "foo.bar.public",
	Tag:           "varint,20003,opt,name=public",
	Filename:      "desc_test_complex.proto",
}

var E_Weak = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20004,
	Name:          "foo.bar.weak",
	Tag:           "varint,20004,opt,name=weak",
	Filename:      "desc_test_complex.proto",
}

var E_Package = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20005,
	Name:          "foo.bar.package",
	Tag:           "varint,20005,opt,name=package",
	Filename:      "desc_test_complex.proto",
}

var E_String = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         20006,
	Name:          "foo.bar.string",
	Tag:           "bytes,20006,opt,name=string",
	Filename:      "desc_test_complex.proto",
}

var E_Bytes = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: ([]byte)(nil),
	Field:         20007,
	Name:          "foo.bar.bytes",
	Tag:           "bytes,20007,opt,name=bytes",
	Filename:      "desc_test_complex.proto",
}

var E_Int32 = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         20008,
	Name:          "foo.bar.int32",
	Tag:           "varint,20008,opt,name=int32",
	Filename:      "desc_test_complex.proto",
}

var E_Int64 = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*int64)(nil),
	Field:         20009,
	Name:          "foo.bar.int64",
	Tag:           "varint,20009,opt,name=int64",
	Filename:      "desc_test_complex.proto",
}

var E_Uint32 = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*uint32)(nil),
	Field:         20010,
	Name:          "foo.bar.uint32",
	Tag:           "varint,20010,opt,name=uint32",
	Filename:      "desc_test_complex.proto",
}

var E_Uint64 = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*uint64)(nil),
	Field:         20011,
	Name:          "foo.bar.uint64",
	Tag:           "varint,20011,opt,name=uint64",
	Filename:      "desc_test_complex.proto",
}

var E_Sint32 = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         20012,
	Name:          "foo.bar.sint32",
	Tag:           "zigzag32,20012,opt,name=sint32",
	Filename:      "desc_test_complex.proto",
}

var E_Sint64 = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*int64)(nil),
	Field:         20013,
	Name:          "foo.bar.sint64",
	Tag:           "zigzag64,20013,opt,name=sint64",
	Filename:      "desc_test_complex.proto",
}

var E_Fixed32 = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*uint32)(nil),
	Field:         20014,
	Name:          "foo.bar.fixed32",
	Tag:           "fixed32,20014,opt,name=fixed32",
	Filename:      "desc_test_complex.proto",
}

var E_Fixed64 = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*uint64)(nil),
	Field:         20015,
	Name:          "foo.bar.fixed64",
	Tag:           "fixed64,20015,opt,name=fixed64",
	Filename:      "desc_test_complex.proto",
}

var E_Sfixed32 = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         20016,
	Name:          "foo.bar.sfixed32",
	Tag:           "fixed32,20016,opt,name=sfixed32",
	Filename:      "desc_test_complex.proto",
}

var E_Sfixed64 = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*int64)(nil),
	Field:         20017,
	Name:          "foo.bar.sfixed64",
	Tag:           "fixed64,20017,opt,name=sfixed64",
	Filename:      "desc_test_complex.proto",
}

var E_Bool = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20018,
	Name:          "foo.bar.bool",
	Tag:           "varint,20018,opt,name=bool",
	Filename:      "desc_test_complex.proto",
}

var E_Float = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*float32)(nil),
	Field:         20019,
	Name:          "foo.bar.float",
	Tag:           "fixed32,20019,opt,name=float",
	Filename:      "desc_test_complex.proto",
}

var E_Double = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*float64)(nil),
	Field:         20020,
	Name:          "foo.bar.double",
	Tag:           "fixed64,20020,opt,name=double",
	Filename:      "desc_test_complex.proto",
}

var E_Optional = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20021,
	Name:          "foo.bar.optional",
	Tag:           "varint,20021,opt,name=optional",
	Filename:      "desc_test_complex.proto",
}

var E_Repeated = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20022,
	Name:          "foo.bar.repeated",
	Tag:           "varint,20022,opt,name=repeated",
	Filename:      "desc_test_complex.proto",
}

var E_Required = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20023,
	Name:          "foo.bar.required",
	Tag:           "varint,20023,opt,name=required",
	Filename:      "desc_test_complex.proto",
}

var E_Message = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20024,
	Name:          "foo.bar.message",
	Tag:           "varint,20024,opt,name=message",
	Filename:      "desc_test_complex.proto",
}

var E_Enum = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20025,
	Name:          "foo.bar.enum",
	Tag:           "varint,20025,opt,name=enum",
	Filename:      "desc_test_complex.proto",
}

var E_Service = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20026,
	Name:          "foo.bar.service",
	Tag:           "varint,20026,opt,name=service",
	Filename:      "desc_test_complex.proto",
}

var E_Rpc = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20027,
	Name:          "foo.bar.rpc",
	Tag:           "varint,20027,opt,name=rpc",
	Filename:      "desc_test_complex.proto",
}

var E_Option = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20028,
	Name:          "foo.bar.option",
	Tag:           "varint,20028,opt,name=option",
	Filename:      "desc_test_complex.proto",
}

var E_Extend = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20029,
	Name:          "foo.bar.extend",
	Tag:           "varint,20029,opt,name=extend",
	Filename:      "desc_test_complex.proto",
}

var E_Extensions = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20030,
	Name:          "foo.bar.extensions",
	Tag:           "varint,20030,opt,name=extensions",
	Filename:      "desc_test_complex.proto",
}

var E_Reserved = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20031,
	Name:          "foo.bar.reserved",
	Tag:           "varint,20031,opt,name=reserved",
	Filename:      "desc_test_complex.proto",
}

var E_To = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         20032,
	Name:          "foo.bar.to",
	Tag:           "varint,20032,opt,name=to",
	Filename:      "desc_test_complex.proto",
}

var E_True = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         20033,
	Name:          "foo.bar.true",
	Tag:           "varint,20033,opt,name=true",
	Filename:      "desc_test_complex.proto",
}

var E_False = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         20034,
	Name:          "foo.bar.false",
	Tag:           "varint,20034,opt,name=false",
	Filename:      "desc_test_complex.proto",
}

var E_Default = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         20035,
	Name:          "foo.bar.default",
	Tag:           "varint,20035,opt,name=default",
	Filename:      "desc_test_complex.proto",
}

var E_Boom = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FieldOptions)(nil),
	ExtensionType: (*KeywordCollisions)(nil),
	Field:         20036,
	Name:          "foo.bar.boom",
	Tag:           "bytes,20036,opt,name=boom",
	Filename:      "desc_test_complex.proto",
}

func init() {
	proto.RegisterType((*Simple)(nil), "foo.bar.Simple")
	proto.RegisterType((*Test)(nil), "foo.bar.Test")
	proto.RegisterType((*Test_Nested)(nil), "foo.bar.Test.Nested")
	proto.RegisterType((*Test_Nested__NestedNested)(nil), "foo.bar.Test.Nested._NestedNested")
	proto.RegisterType((*Test_Nested__NestedNested_NestedNestedNested)(nil), "foo.bar.Test.Nested._NestedNested.NestedNestedNested")
	proto.RegisterType((*Another)(nil), "foo.bar.Another")
	proto.RegisterType((*Validator)(nil), "foo.bar.Validator")
	proto.RegisterType((*Validator_Permission)(nil), "foo.bar.Validator.Permission")
	proto.RegisterType((*Rule)(nil), "foo.bar.Rule")
	proto.RegisterType((*Rule_StringRule)(nil), "foo.bar.Rule.StringRule")
	proto.RegisterType((*Rule_IntRule)(nil), "foo.bar.Rule.IntRule")
	proto.RegisterType((*Rule_RepeatedRule)(nil), "foo.bar.Rule.RepeatedRule")
	proto.RegisterType((*IsAuthorizedReq)(nil), "foo.bar.IsAuthorizedReq")
	proto.RegisterType((*KeywordCollisions)(nil), "foo.bar.KeywordCollisions")
	proto.RegisterType((*KeywordCollisionOptions)(nil), "foo.bar.KeywordCollisionOptions")
	proto.RegisterEnum("foo.bar.Test_Nested__NestedNested_EEE", Test_Nested__NestedNested_EEE_name, Test_Nested__NestedNested_EEE_value)
	proto.RegisterEnum("foo.bar.Validator_Action", Validator_Action_name, Validator_Action_value)
	proto.RegisterExtension(E_Test_Nested_Fooblez)
	proto.RegisterExtension(E_Test_Nested_XNestedNested_XGarblez)
	proto.RegisterExtension(E_Label)
	proto.RegisterExtension(E_Rept)
	proto.RegisterExtension(E_Eee)
	proto.RegisterExtension(E_A)
	proto.RegisterExtension(E_Validator)
	proto.RegisterExtension(E_Rules)
	proto.RegisterExtension(E_Syntax)
	proto.RegisterExtension(E_Import)
	proto.RegisterExtension(E_Public)
	proto.RegisterExtension(E_Weak)
	proto.RegisterExtension(E_Package)
	proto.RegisterExtension(E_String)
	proto.RegisterExtension(E_Bytes)
	proto.RegisterExtension(E_Int32)
	proto.RegisterExtension(E_Int64)
	proto.RegisterExtension(E_Uint32)
	proto.RegisterExtension(E_Uint64)
	proto.RegisterExtension(E_Sint32)
	proto.RegisterExtension(E_Sint64)
	proto.RegisterExtension(E_Fixed32)
	proto.RegisterExtension(E_Fixed64)
	proto.RegisterExtension(E_Sfixed32)
	proto.RegisterExtension(E_Sfixed64)
	proto.RegisterExtension(E_Bool)
	proto.RegisterExtension(E_Float)
	proto.RegisterExtension(E_Double)
	proto.RegisterExtension(E_Optional)
	proto.RegisterExtension(E_Repeated)
	proto.RegisterExtension(E_Required)
	proto.RegisterExtension(E_Message)
	proto.RegisterExtension(E_Enum)
	proto.RegisterExtension(E_Service)
	proto.RegisterExtension(E_Rpc)
	proto.RegisterExtension(E_Option)
	proto.RegisterExtension(E_Extend)
	proto.RegisterExtension(E_Extensions)
	proto.RegisterExtension(E_Reserved)
	proto.RegisterExtension(E_To)
	proto.RegisterExtension(E_True)
	proto.RegisterExtension(E_False)
	proto.RegisterExtension(E_Default)
	proto.RegisterExtension(E_Boom)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestTestService service

type TestTestServiceClient interface {
	UserAuth(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
	Get(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
}

type testTestServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestTestServiceClient(cc *grpc.ClientConn) TestTestServiceClient {
	return &testTestServiceClient{cc}
}

func (c *testTestServiceClient) UserAuth(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := grpc.Invoke(ctx, "/foo.bar.TestTestService/UserAuth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testTestServiceClient) Get(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := grpc.Invoke(ctx, "/foo.bar.TestTestService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestTestService service

type TestTestServiceServer interface {
	UserAuth(context.Context, *Test) (*Test, error)
	Get(context.Context, *Test) (*Test, error)
}

func RegisterTestTestServiceServer(s *grpc.Server, srv TestTestServiceServer) {
	s.RegisterService(&_TestTestService_serviceDesc, srv)
}

func _TestTestService_UserAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestTestServiceServer).UserAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foo.bar.TestTestService/UserAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestTestServiceServer).UserAuth(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestTestService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestTestServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foo.bar.TestTestService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestTestServiceServer).Get(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestTestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "foo.bar.TestTestService",
	HandlerType: (*TestTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserAuth",
			Handler:    _TestTestService_UserAuth_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TestTestService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desc_test_complex.proto",
}

func init() { proto.RegisterFile("desc_test_complex.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 2509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x98, 0x5b, 0x6c, 0x1c, 0xd5,
	0x19, 0xc7, 0xfd, 0xcd, 0xcc, 0xee, 0xce, 0x39, 0x76, 0x92, 0x61, 0x08, 0x64, 0xb2, 0x34, 0x64,
	0xb3, 0xa0, 0x68, 0xe3, 0xb6, 0xeb, 0xf5, 0xda, 0x31, 0x30, 0xa1, 0xc4, 0x09, 0xb8, 0x60, 0x71,
	0x09, 0x1d, 0xa8, 0xa9, 0xc0, 0xd4, 0xcc, 0xee, 0x9e, 0xb5, 0x07, 0x66, 0x67, 0x96, 0x99, 0xd9,
	0x60, 0xa7, 0x91, 0xb0, 0x40, 0x45, 0xf4, 0xa5, 0x4d, 0xad, 0x3e, 0x44, 0x95, 0x91, 0xc0, 0xb4,
	0x05, 0x0a, 0x6d, 0x29, 0xbd, 0x01, 0xbd, 0x85, 0xd2, 0x87, 0x34, 0x52, 0xa5, 0x88, 0xa7, 0x3c,
	0x41, 0xb4, 0x1b, 0x55, 0x79, 0x8c, 0x44, 0x53, 0xc1, 0x53, 0xaa, 0x73, 0x99, 0x59, 0x3b, 0x49,
	0x35, 0x74, 0x25, 0x7b, 0xe6, 0x3b, 0xdf, 0xf7, 0x3b, 0xd7, 0xef, 0x9c, 0xf3, 0xdf, 0xc5, 0xdb,
	0x1a, 0x24, 0xac, 0xcf, 0x45, 0x24, 0x8c, 0xe6, 0xea, 0x7e, 0xab, 0xed, 0x92, 0xc5, 0x72, 0x3b,
	0xf0, 0x23, 0x5f, 0xcf, 0x35, 0x7d, 0xbf, 0x5c, 0xb3, 0x83, 0x7c, 0x61, 0xde, 0xf7, 0xe7, 0x5d,
	0x32, 0xc2, 0x8a, 0x6b, 0x9d, 0xe6, 0x08, 0x25, 0x02, 0xa7, 0x1d, 0xf9, 0x01, 0x0f, 0x2d, 0x7e,
	0x05, 0x67, 0x1f, 0x72, 0x28, 0xab, 0xeb, 0x58, 0xf1, 0xec, 0x16, 0x31, 0xa0, 0x00, 0x25, 0x64,
	0xb1, 0x77, 0x7d, 0x33, 0x96, 0x9c, 0x86, 0x21, 0x15, 0xa0, 0xa4, 0x58, 0x92, 0xd3, 0x28, 0xfe,
	0x47, 0xc1, 0xca, 0xc3, 0x24, 0x8c, 0x74, 0x1d, 0xcb, 0x4d, 0xdf, 0x17, 0xb1, 0x99, 0xa3, 0x4d,
	0xdf, 0x3f, 0xaa, 0x6f, 0xc5, 0x19, 0x3b, 0x08, 0xec, 0x25, 0x43, 0x2a, 0xc8, 0xa5, 0x8c, 0xc5,
	0x0d, 0x7d, 0x07, 0x86, 0xd0, 0x90, 0x0b, 0x50, 0x1a, 0xac, 0x6e, 0x29, 0x8b, 0x7e, 0x95, 0x79,
	0x93, 0x16, 0x84, 0xd4, 0x1d, 0x18, 0x4a, 0x41, 0xbe, 0xaa, 0x3b, 0xd0, 0x8b, 0x18, 0x5a, 0x46,
	0x86, 0xb9, 0xb7, 0x26, 0x6e, 0xda, 0x83, 0xf2, 0xfd, 0x53, 0x5e, 0x14, 0x2c, 0x59, 0xd0, 0xd2,
	0xc7, 0x31, 0xd4, 0x8c, 0x6c, 0x01, 0x4a, 0x43, 0xe6, 0xee, 0xd9, 0x4a, 0xa5, 0x32, 0x5b, 0xa9,
	0x8c, 0xce, 0x56, 0x2a, 0xd5, 0xd9, 0x4a, 0x65, 0x6c, 0xb6, 0x52, 0x19, 0x9f, 0xad, 0x54, 0xf6,
	0xce, 0x56, 0x2a, 0x13, 0xb3, 0x95, 0xca, 0x2d, 0xcd, 0x4e, 0xcd, 0x0e, 0x76, 0x59, 0x50, 0xcb,
	0x8f, 0xe3, 0x2c, 0xaf, 0x42, 0xd7, 0xb0, 0xfc, 0x14, 0x59, 0x12, 0x63, 0xa1, 0xaf, 0x74, 0x24,
	0x87, 0x6d, 0xb7, 0x43, 0xd8, 0xc8, 0x33, 0x16, 0x37, 0x4c, 0xe9, 0x56, 0xc8, 0x9f, 0x92, 0x70,
	0xf6, 0x01, 0x12, 0x46, 0xa4, 0x91, 0x7f, 0x4e, 0xc2, 0x9b, 0xe6, 0xf8, 0xbb, 0x28, 0x99, 0xc6,
	0xfa, 0x7a, 0x9b, 0xff, 0xd7, 0x77, 0xf1, 0x29, 0x63, 0xf5, 0x0f, 0x56, 0x37, 0x6d, 0x18, 0x85,
	0xc5, 0x5c, 0xa6, 0xb6, 0xd2, 0x45, 0x43, 0x58, 0x5e, 0xf0, 0xfd, 0xb5, 0xac, 0x12, 0xb6, 0x7d,
	0xbf, 0xd8, 0xc4, 0xf2, 0xd4, 0xd4, 0x94, 0x9e, 0xc5, 0xd2, 0xa1, 0x7b, 0xb5, 0x01, 0xfa, 0x9c,
	0x19, 0xd5, 0x80, 0x3d, 0xab, 0x9a, 0xc4, 0x9e, 0x63, 0x9a, 0xcc, 0x9e, 0xe3, 0x9a, 0xc2, 0x9e,
	0x7b, 0xb5, 0x0c, 0x7b, 0x4e, 0x68, 0xd9, 0xa2, 0xa2, 0xe6, 0xb4, 0x5c, 0x51, 0x51, 0x55, 0x4d,
	0x2d, 0x2a, 0x2a, 0xd2, 0x50, 0x51, 0x51, 0xb1, 0x86, 0x87, 0xa5, 0x99, 0x5b, 0x86, 0xa5, 0x99,
	0x5b, 0x87, 0xa5, 0x99, 0xdb, 0x86, 0xe5, 0x99, 0xd1, 0x4a, 0xb5, 0x84, 0xd5, 0xb9, 0x79, 0x3b,
	0xa8, 0xb9, 0xe4, 0x88, 0xbe, 0xb1, 0x6b, 0x46, 0x83, 0xcd, 0x47, 0xee, 0x6e, 0xee, 0x35, 0xb7,
	0xae, 0x74, 0xd1, 0x20, 0x96, 0xe7, 0x69, 0x1f, 0xe5, 0x9a, 0xef, 0x1f, 0xef, 0xa2, 0x8b, 0x0f,
	0x54, 0xf7, 0x61, 0x9a, 0x6b, 0x0c, 0xdf, 0x59, 0xe6, 0xc9, 0x56, 0x8e, 0x93, 0xad, 0x7c, 0x3f,
	0x09, 0x43, 0x7b, 0x9e, 0x1c, 0x6a, 0x47, 0x8e, 0xef, 0x85, 0xc6, 0xab, 0xab, 0xc0, 0xa6, 0x33,
	0x26, 0x86, 0x33, 0x6a, 0x43, 0xfb, 0x07, 0x0c, 0x6b, 0xea, 0x5b, 0x92, 0xf6, 0x89, 0x94, 0x57,
	0x9f, 0xeb, 0x22, 0xe5, 0x49, 0xfb, 0xc8, 0x91, 0x61, 0x4d, 0xfd, 0xb7, 0xac, 0xbd, 0xa6, 0xf4,
	0x4b, 0x8a, 0xc7, 0x25, 0x9c, 0x3b, 0xe0, 0xf9, 0xd1, 0x02, 0x09, 0xe8, 0x84, 0x46, 0xff, 0x7b,
	0x42, 0xa9, 0x4b, 0xbf, 0x1d, 0xcb, 0xcd, 0x66, 0x93, 0x2d, 0xdf, 0xe6, 0xea, 0xee, 0x8d, 0x89,
	0xc3, 0x97, 0xa5, 0xbc, 0x61, 0xe9, 0xca, 0x53, 0x53, 0x53, 0xa6, 0x34, 0x33, 0x6a, 0x51, 0xcc,
	0x7c, 0x13, 0x56, 0xba, 0xe8, 0x26, 0x2c, 0xdb, 0xb5, 0xba, 0x06, 0x9a, 0xa4, 0xc9, 0xf9, 0x1c,
	0x4b, 0x77, 0xed, 0x3b, 0x45, 0x19, 0x43, 0x93, 0xfe, 0x0b, 0x8b, 0xb2, 0x76, 0x52, 0x5e, 0xe9,
	0xa2, 0x9d, 0x58, 0x6e, 0x90, 0xa6, 0x26, 0x6b, 0x92, 0x06, 0x79, 0x15, 0xcb, 0x35, 0x3b, 0xd0,
	0x3e, 0x90, 0x68, 0xc8, 0x3c, 0x8b, 0x5b, 0xe9, 0xa2, 0x0c, 0x0b, 0x39, 0xdd, 0x45, 0xb0, 0xd6,
	0x43, 0x92, 0x36, 0xb0, 0xd6, 0x43, 0xd7, 0xe1, 0x6b, 0x87, 0x45, 0x9d, 0x8d, 0x61, 0x41, 0x9d,
	0xa4, 0xee, 0x1c, 0xce, 0x60, 0xb9, 0xb5, 0xbb, 0xb5, 0xd6, 0x43, 0x18, 0xab, 0xf9, 0x2c, 0x56,
	0x96, 0x7c, 0xd7, 0x5f, 0xeb, 0x21, 0x15, 0x67, 0xf3, 0x8a, 0xf6, 0xcf, 0xe7, 0xb3, 0x6b, 0x3d,
	0xa4, 0x60, 0x49, 0x03, 0xf1, 0x94, 0x8a, 0x9f, 0x02, 0x46, 0x33, 0xb6, 0xeb, 0x34, 0xec, 0xc8,
	0x0f, 0xf4, 0x9b, 0xf1, 0x26, 0xbb, 0x13, 0x2d, 0x10, 0x2f, 0x72, 0xea, 0x76, 0x44, 0x1a, 0x6c,
	0x96, 0x54, 0x6b, 0x63, 0xa1, 0xfe, 0x35, 0x8c, 0xdb, 0x24, 0x68, 0x39, 0x61, 0xe8, 0xf8, 0x1e,
	0xdb, 0xaf, 0x83, 0xd5, 0x1d, 0xc9, 0x34, 0x25, 0xb5, 0x95, 0x1f, 0x4c, 0x82, 0xac, 0x75, 0x40,
	0xfe, 0x11, 0x8c, 0xfb, 0x1e, 0x7d, 0x14, 0x67, 0xed, 0x3a, 0x5d, 0x62, 0xd6, 0xd6, 0xe6, 0xea,
	0xf6, 0xab, 0x54, 0x74, 0x80, 0x05, 0x58, 0x22, 0x50, 0xbf, 0x1e, 0x67, 0x69, 0x67, 0xa2, 0x25,
	0xb6, 0x44, 0xc8, 0x12, 0x56, 0xb1, 0x84, 0xb3, 0x3c, 0x52, 0x47, 0x38, 0x73, 0xdf, 0xa1, 0xbb,
	0xa7, 0x1f, 0xd0, 0x06, 0x74, 0x15, 0x2b, 0xd6, 0xd4, 0x81, 0xbb, 0x34, 0xa0, 0x85, 0x8f, 0x58,
	0xd3, 0x0f, 0x4f, 0x69, 0x52, 0xf1, 0x82, 0x8c, 0x15, 0xab, 0xe3, 0x12, 0xbd, 0x8a, 0xb3, 0x61,
	0x14, 0x38, 0xde, 0xbc, 0xc8, 0x07, 0x23, 0x69, 0x9d, 0xba, 0xcb, 0x0f, 0x31, 0x1f, 0x7d, 0xbd,
	0x67, 0xc0, 0x12, 0x91, 0xfa, 0xad, 0x58, 0x0d, 0x48, 0x9b, 0xb0, 0xf9, 0x91, 0x18, 0x95, 0xdf,
	0x48, 0x59, 0xc2, 0x2b, 0xb8, 0x24, 0x5a, 0xdf, 0x83, 0x65, 0xc7, 0x8b, 0xc4, 0x79, 0x76, 0xdd,
	0x46, 0x68, 0xda, 0x8b, 0x44, 0x3c, 0x8d, 0xc9, 0x2f, 0x61, 0xdc, 0x6f, 0x5c, 0x37, 0x70, 0xae,
	0x6d, 0x47, 0x11, 0x09, 0x3c, 0x71, 0xd0, 0xc4, 0xa6, 0xbe, 0x13, 0x0f, 0xda, 0xae, 0xeb, 0x3f,
	0x33, 0x47, 0x5a, 0x6d, 0x31, 0x21, 0xaa, 0x85, 0x59, 0xd1, 0x14, 0x2d, 0xd1, 0xb7, 0xe1, 0x5c,
	0xcb, 0xf1, 0xe6, 0x5c, 0xe2, 0xb1, 0x76, 0x33, 0x56, 0xb6, 0xe5, 0x78, 0xf7, 0x11, 0x8f, 0x39,
	0xec, 0x45, 0xe6, 0x50, 0x84, 0xc3, 0x5e, 0xbc, 0x8f, 0x78, 0xf9, 0x7d, 0x38, 0x27, 0x3a, 0x13,
	0xc3, 0x87, 0x6d, 0x97, 0xb5, 0x2b, 0x33, 0x78, 0xc6, 0x76, 0x63, 0x98, 0x3a, 0xf8, 0xf9, 0x4e,
	0xe1, 0x19, 0xdb, 0xcd, 0x7f, 0x1f, 0xf0, 0xd0, 0xfa, 0xf1, 0x5f, 0xde, 0x41, 0xb8, 0xa2, 0x83,
	0x37, 0x60, 0x44, 0xdb, 0x70, 0x22, 0xd2, 0x0a, 0xc5, 0x91, 0xa9, 0xb6, 0x1c, 0x6f, 0x9a, 0xda,
	0xcc, 0x69, 0x2f, 0x0a, 0xa7, 0x2c, 0x9c, 0xf6, 0x22, 0x77, 0xde, 0x84, 0x33, 0xdc, 0xa1, 0x5c,
	0xb6, 0x97, 0x69, 0xc3, 0x16, 0xf7, 0x1d, 0xcc, 0x62, 0x25, 0xe8, 0xb8, 0xa4, 0xd8, 0xc2, 0x5b,
	0xa6, 0xc3, 0x03, 0x9d, 0x68, 0xc1, 0x0f, 0x9c, 0x23, 0xa4, 0x61, 0x91, 0xa7, 0xf5, 0x47, 0xb1,
	0x1a, 0x76, 0x6a, 0x4f, 0x92, 0x7a, 0x14, 0x1a, 0x50, 0x90, 0x4b, 0xe8, 0xe0, 0x1d, 0x2b, 0xf7,
	0xef, 0xd3, 0x6f, 0xd3, 0xa0, 0xb8, 0x17, 0x8f, 0xe1, 0xd1, 0x6f, 0x97, 0xf6, 0x9b, 0xa5, 0xfd,
	0x66, 0x44, 0xec, 0x16, 0x7d, 0xba, 0x7e, 0xdd, 0x76, 0x8f, 0xba, 0x0d, 0xbb, 0xbd, 0x67, 0xcf,
	0xd1, 0x4e, 0x48, 0x82, 0x3d, 0xe6, 0x63, 0x8f, 0x99, 0xb6, 0xeb, 0x75, 0x5a, 0xe6, 0xe3, 0x73,
	0x5f, 0x7d, 0xfc, 0xcb, 0x37, 0x5b, 0x49, 0x7d, 0xc5, 0x4f, 0xb2, 0xf8, 0x9a, 0x7b, 0xc9, 0xd2,
	0x33, 0x7e, 0xd0, 0xb8, 0xd3, 0x77, 0x5d, 0x87, 0xe6, 0x7a, 0x48, 0x33, 0x37, 0x5c, 0xf2, 0x22,
	0x7b, 0x51, 0xcc, 0x83, 0xb0, 0x68, 0xb9, 0xd3, 0x6a, 0xfb, 0x41, 0x24, 0x16, 0x50, 0x58, 0xb4,
	0xbc, 0xdd, 0xa9, 0xb9, 0x4e, 0x9d, 0x8d, 0x5d, 0xb5, 0x84, 0x45, 0x6f, 0xdb, 0x67, 0x88, 0xfd,
	0x14, 0x1b, 0xb8, 0x6a, 0xb1, 0x77, 0x9e, 0x23, 0xf5, 0xa7, 0xec, 0x79, 0x62, 0x64, 0x58, 0x71,
	0x6c, 0xb2, 0x56, 0x79, 0x92, 0x67, 0xf9, 0x7e, 0x11, 0x89, 0xbc, 0x15, 0x67, 0x6a, 0x4b, 0x11,
	0x09, 0x8d, 0x1c, 0xbd, 0xfe, 0x2c, 0x6e, 0xd0, 0x52, 0xc7, 0x8b, 0xc6, 0xaa, 0x86, 0xca, 0xaf,
	0x2f, 0x66, 0x88, 0xd2, 0x89, 0x71, 0x03, 0xb1, 0x3c, 0xe0, 0x06, 0xad, 0xb9, 0xc3, 0x83, 0x71,
	0x01, 0x4a, 0x9b, 0x2c, 0x61, 0xc5, 0xe5, 0x13, 0xe3, 0xc6, 0x20, 0xcf, 0x8e, 0x4e, 0x12, 0x1f,
	0xf2, 0xf8, 0xa1, 0x02, 0x94, 0xae, 0xb1, 0x84, 0x15, 0x97, 0x4f, 0x8c, 0x1b, 0x9b, 0x0a, 0x50,
	0xd2, 0x2d, 0x61, 0xd1, 0x31, 0x35, 0x9d, 0x45, 0xd2, 0x18, 0xab, 0x1a, 0x9b, 0x0b, 0x50, 0xca,
	0x59, 0xb1, 0x99, 0x78, 0x26, 0xc6, 0x8d, 0x2d, 0x05, 0x28, 0x65, 0xad, 0xd8, 0xd4, 0xf3, 0x58,
	0x0d, 0x63, 0x48, 0x2b, 0x40, 0x69, 0x8b, 0x95, 0xd8, 0x7d, 0xdf, 0xc4, 0xb8, 0x71, 0x4d, 0x01,
	0x4a, 0x9a, 0x95, 0xd8, 0x74, 0x4e, 0x6b, 0xbe, 0xef, 0x1a, 0x3a, 0x9f, 0x53, 0xfa, 0x4e, 0x47,
	0xdd, 0x74, 0x7d, 0x3b, 0x32, 0xae, 0x2d, 0x40, 0x49, 0xb2, 0xb8, 0x41, 0x7b, 0xdb, 0xf0, 0x3b,
	0x35, 0x97, 0x18, 0x5b, 0x0b, 0x50, 0x02, 0x4b, 0x58, 0xb4, 0x76, 0x9f, 0xdd, 0x56, 0xb6, 0x6b,
	0x5c, 0xc7, 0x6a, 0x49, 0x6c, 0xea, 0x4b, 0x0e, 0x8d, 0xeb, 0xb9, 0x2f, 0x39, 0x16, 0x98, 0xef,
	0xe9, 0x8e, 0x13, 0x90, 0x86, 0xb1, 0x2d, 0xf6, 0x71, 0x9b, 0x8e, 0xb3, 0xc5, 0x2f, 0x42, 0xc3,
	0xe0, 0xab, 0x2a, 0x4c, 0xda, 0x5f, 0xe2, 0x75, 0x5a, 0xc6, 0x76, 0xde, 0x5f, 0xfa, 0x4e, 0xa3,
	0x43, 0x12, 0x1c, 0x76, 0xea, 0xc4, 0xc8, 0xf3, 0x68, 0x61, 0x52, 0x99, 0x12, 0xb4, 0xeb, 0xc6,
	0x0d, 0xac, 0x94, 0xbe, 0xd2, 0x51, 0xf0, 0xde, 0x19, 0x5f, 0xe2, 0xb9, 0xc5, 0x2d, 0x76, 0xba,
	0x2e, 0x46, 0xc4, 0x6b, 0x18, 0x3b, 0x78, 0x39, 0xb7, 0xf4, 0x1b, 0x31, 0x66, 0x6f, 0x2c, 0x93,
	0x8d, 0x1b, 0xf9, 0x3e, 0xee, 0x97, 0xf0, 0x51, 0xd0, 0xe6, 0x48, 0xc3, 0xd8, 0x19, 0x8f, 0x82,
	0xdb, 0x54, 0x09, 0x46, 0xbe, 0x51, 0x60, 0xa5, 0x52, 0xe4, 0xd3, 0xbe, 0x47, 0x41, 0x87, 0x18,
	0xbb, 0x58, 0x8a, 0xb1, 0x77, 0x36, 0xd7, 0xb6, 0x1b, 0x12, 0xa3, 0xc8, 0xf3, 0x8e, 0x19, 0x74,
	0x44, 0x0d, 0xd2, 0xb4, 0x3b, 0x6e, 0x64, 0xdc, 0xc4, 0xef, 0x7f, 0x61, 0x16, 0x7f, 0x2c, 0xe3,
	0x6d, 0x97, 0xef, 0x30, 0x21, 0x16, 0xf4, 0x8f, 0x80, 0x49, 0x4f, 0xba, 0xc9, 0x94, 0x83, 0x1f,
	0xc0, 0x8b, 0x5d, 0x04, 0xc7, 0xba, 0x08, 0x8e, 0x77, 0x11, 0xbc, 0xdc, 0x45, 0xf0, 0x7a, 0x17,
	0xc1, 0x3b, 0x5d, 0x24, 0xf6, 0xc1, 0xfb, 0x5d, 0xc4, 0x53, 0xff, 0x44, 0x17, 0x15, 0x4e, 0x76,
	0xd1, 0xe4, 0xe9, 0x2e, 0x5a, 0xde, 0x7e, 0xa6, 0x8b, 0x96, 0xab, 0x67, 0xbb, 0x68, 0xff, 0xf9,
	0x2e, 0x7a, 0xf6, 0x62, 0x17, 0xbd, 0x3c, 0x34, 0x30, 0xf0, 0x79, 0x17, 0x4d, 0x6e, 0x1f, 0x60,
	0x9f, 0xef, 0xf6, 0xd0, 0x13, 0x9f, 0x5e, 0xba, 0xf4, 0xbd, 0x1e, 0x3a, 0xf1, 0xaf, 0x4b, 0xec,
	0x73, 0xac, 0x87, 0xe0, 0xa5, 0x1e, 0xfa, 0xf0, 0xe2, 0x3d, 0x93, 0xaf, 0xf4, 0x90, 0xf7, 0xc2,
	0x0d, 0x17, 0x3e, 0xdf, 0x85, 0x26, 0x5f, 0xef, 0x21, 0x78, 0xbb, 0x87, 0xe0, 0xdd, 0x1e, 0x82,
	0x13, 0x3d, 0x04, 0x27, 0x7b, 0x08, 0x4e, 0xf7, 0x10, 0x9c, 0xe9, 0x21, 0x38, 0xdb, 0x43, 0x70,
	0xbe, 0x87, 0xe0, 0x42, 0x0f, 0xc1, 0x67, 0x3d, 0x04, 0xcb, 0xe7, 0x10, 0xbc, 0x78, 0x0e, 0xf9,
	0xc7, 0xce, 0xa1, 0x1f, 0x5e, 0x12, 0x1f, 0x38, 0x7e, 0x0e, 0x7d, 0x0c, 0x54, 0x3e, 0xeb, 0x6f,
	0x80, 0xd0, 0xd8, 0xec, 0xd6, 0x3b, 0xf8, 0x23, 0x58, 0x3b, 0x87, 0x7e, 0x00, 0x2a, 0x68, 0xc0,
	0x06, 0x0a, 0x55, 0x31, 0x1e, 0x93, 0x8f, 0x66, 0xb2, 0x70, 0xcf, 0xe4, 0x83, 0xcb, 0xdb, 0xbf,
	0xb5, 0x5c, 0x7d, 0x62, 0xff, 0xc2, 0xb3, 0x1d, 0xda, 0xff, 0xa5, 0xa4, 0xf7, 0xc0, 0x3a, 0x0f,
	0x49, 0xdf, 0x01, 0x5e, 0x02, 0xd6, 0x73, 0x48, 0x3a, 0x0e, 0xf0, 0x36, 0xc0, 0xbb, 0x00, 0x27,
	0x00, 0x4e, 0x02, 0x9c, 0x06, 0x38, 0x03, 0x70, 0x16, 0xe0, 0x3c, 0xc0, 0x05, 0x80, 0xcf, 0x00,
	0x96, 0x25, 0x78, 0x51, 0xf2, 0x8f, 0x49, 0xeb, 0xba, 0x2a, 0x7d, 0x0c, 0x5c, 0xfa, 0x57, 0x5f,
	0x00, 0xbc, 0x85, 0xea, 0x25, 0xfa, 0xf7, 0x90, 0x48, 0xc1, 0xdb, 0xb1, 0xfa, 0xcd, 0x90, 0x04,
	0xf4, 0x0c, 0xbe, 0x4c, 0x2d, 0xe6, 0x37, 0x9a, 0x45, 0xfd, 0xd4, 0xf3, 0xd9, 0xcd, 0x2a, 0xe8,
	0x58, 0x1d, 0xd0, 0xb3, 0x75, 0xd7, 0x21, 0x5e, 0xa4, 0xef, 0xc5, 0xf2, 0xdd, 0x24, 0x4a, 0x01,
	0xb5, 0x53, 0xcf, 0x67, 0x87, 0x54, 0xd0, 0x55, 0x15, 0x74, 0x85, 0x1e, 0xd1, 0xe6, 0x1d, 0x38,
	0xe3, 0xda, 0x35, 0xe2, 0xea, 0xbb, 0xaf, 0x10, 0x98, 0x53, 0x71, 0xee, 0x5a, 0xb6, 0xd7, 0xd7,
	0x99, 0x2f, 0xaf, 0x8a, 0xaf, 0x25, 0x0c, 0x33, 0xef, 0xc2, 0x4a, 0x40, 0xda, 0x51, 0xba, 0x3e,
	0x5d, 0x5b, 0x05, 0x26, 0x84, 0x2e, 0x57, 0x94, 0x94, 0x36, 0x1f, 0xc3, 0x32, 0x21, 0x24, 0xbd,
	0x92, 0x9f, 0xaf, 0xc2, 0xff, 0x23, 0x3a, 0x2d, 0x5a, 0xab, 0x79, 0x00, 0x83, 0x9d, 0x5e, 0xf5,
	0x6f, 0x57, 0xb9, 0xc2, 0xd1, 0x92, 0xaa, 0x85, 0x22, 0xb6, 0xc0, 0x36, 0xbf, 0x81, 0xd1, 0xe1,
	0x44, 0x04, 0xde, 0x78, 0x95, 0xaa, 0xa2, 0x05, 0xbf, 0x11, 0xd7, 0xf4, 0xde, 0x13, 0xac, 0x22,
	0xfd, 0x4a, 0xa1, 0x66, 0xf5, 0x6b, 0x31, 0xef, 0xc4, 0x19, 0x7a, 0xef, 0x86, 0xfa, 0x8e, 0x2b,
	0xaa, 0xfb, 0xba, 0x43, 0xdc, 0xa4, 0xb6, 0x8f, 0xd0, 0x55, 0x2f, 0x6f, 0xc6, 0x9a, 0xb7, 0xc4,
	0xf7, 0x65, 0x5a, 0x2d, 0xaf, 0xac, 0x6e, 0xb8, 0x50, 0x29, 0x28, 0xae, 0xd0, 0x14, 0x70, 0x2d,
	0x06, 0x79, 0x38, 0x05, 0xc5, 0x1d, 0x9b, 0x02, 0xbe, 0x1a, 0x83, 0x3c, 0xdc, 0x1c, 0xe3, 0x57,
	0x72, 0x1a, 0xf6, 0x13, 0x81, 0xb1, 0x60, 0xf3, 0xb6, 0xe4, 0xce, 0x4e, 0xe3, 0x7e, 0x2a, 0xb8,
	0x38, 0x9e, 0x4d, 0x0d, 0xbf, 0xc6, 0x53, 0xc8, 0x9f, 0x89, 0x84, 0x8e, 0x4f, 0x87, 0xbd, 0xe2,
	0xd6, 0x4f, 0xe3, 0x5e, 0x63, 0x5c, 0x2c, 0x0b, 0x28, 0xc6, 0xef, 0xea, 0x14, 0xec, 0x75, 0xf1,
	0x3d, 0x8d, 0x47, 0x0b, 0x6c, 0x62, 0x3c, 0x0d, 0x7b, 0x63, 0x15, 0xd6, 0x09, 0x0b, 0x3a, 0xba,
	0xce, 0x17, 0x6a, 0x8e, 0xef, 0x98, 0x44, 0x79, 0xc4, 0x60, 0x7a, 0x83, 0x6f, 0x32, 0x30, 0x91,
	0x26, 0x6c, 0x3e, 0xbf, 0x50, 0x8b, 0x6f, 0x31, 0x30, 0xd1, 0x2e, 0x31, 0x98, 0xde, 0xe2, 0x2f,
	0x18, 0x98, 0x88, 0x1b, 0xba, 0xf8, 0xb1, 0x2e, 0x49, 0x21, 0x7f, 0xc9, 0xc8, 0xbe, 0xfa, 0x49,
	0xd0, 0xf4, 0x46, 0x7f, 0xc5, 0xd0, 0xbe, 0x3c, 0x32, 0xf7, 0xf5, 0xe5, 0x51, 0x1a, 0xfb, 0x36,
	0x63, 0xd7, 0xe9, 0xa7, 0x3e, 0x9c, 0xde, 0xf0, 0xaf, 0x19, 0xbc, 0x4e, 0x60, 0xd1, 0x1d, 0xc2,
	0x44, 0x55, 0x0a, 0xf8, 0x4e, 0xbc, 0x43, 0x68, 0x30, 0xcd, 0x1f, 0x2e, 0xba, 0x52, 0xa8, 0xdf,
	0x30, 0x2a, 0x96, 0x68, 0x74, 0x51, 0x84, 0x28, 0x4b, 0xe1, 0xf8, 0xb1, 0x98, 0x68, 0x38, 0x3a,
	0xc2, 0x44, 0xb3, 0xa5, 0xa0, 0xbf, 0x13, 0x1d, 0x4d, 0x00, 0x0a, 0x27, 0xa2, 0x2e, 0x05, 0xfe,
	0x7d, 0x0c, 0xc7, 0x00, 0x87, 0x85, 0xea, 0x4b, 0x81, 0xff, 0xd0, 0x87, 0x39, 0x40, 0x13, 0x22,
	0xd6, 0x85, 0x29, 0xec, 0xbb, 0xf1, 0x41, 0x22, 0xe2, 0xe9, 0xb2, 0x30, 0xed, 0x98, 0xc2, 0xbd,
	0x17, 0x2f, 0x0b, 0x0d, 0xa6, 0xed, 0xc5, 0xca, 0x32, 0x85, 0x7b, 0x3f, 0x6e, 0x4f, 0xc4, 0x9b,
	0xa3, 0x4c, 0x89, 0xa6, 0x61, 0x7f, 0x14, 0x18, 0x8d, 0xa5, 0xab, 0x29, 0xc4, 0x69, 0x0a, 0xf5,
	0xa7, 0xf8, 0x50, 0xe6, 0xe1, 0x14, 0x14, 0xea, 0x35, 0x05, 0xfc, 0x73, 0x0c, 0xf2, 0x70, 0x73,
	0xff, 0x7a, 0xb1, 0x9b, 0x06, 0xff, 0x45, 0xc0, 0xeb, 0x10, 0xbe, 0x9a, 0x42, 0xfd, 0xa6, 0xe0,
	0x7f, 0xed, 0xaf, 0x26, 0x07, 0xcc, 0x11, 0x2a, 0x97, 0xd3, 0xb0, 0x13, 0x02, 0x93, 0x22, 0x9f,
	0xae, 0x21, 0xd3, 0xd0, 0x29, 0xc8, 0x07, 0xe2, 0x6c, 0x66, 0xc1, 0x6c, 0x6b, 0x31, 0x8d, 0x9d,
	0x42, 0xfd, 0x2d, 0x3e, 0xd1, 0x59, 0x34, 0x5d, 0x7a, 0x21, 0xc1, 0xd3, 0xc0, 0x0f, 0xe3, 0x9f,
	0xec, 0x44, 0xbc, 0x79, 0x88, 0x9d, 0x00, 0xa9, 0xa9, 0xf6, 0x77, 0x21, 0x55, 0xfa, 0x3f, 0xab,
	0x5c, 0xf1, 0x4d, 0x9a, 0x9d, 0x0e, 0xad, 0x83, 0x63, 0x8f, 0x8e, 0xce, 0x3b, 0xd1, 0x42, 0xa7,
	0x56, 0xae, 0xfb, 0xad, 0x91, 0x27, 0x17, 0x3a, 0xad, 0x36, 0xff, 0xb5, 0x3a, 0x20, 0x4d, 0x97,
	0xd4, 0xa3, 0x11, 0xc7, 0x8b, 0x48, 0xe0, 0xd9, 0xee, 0x48, 0x44, 0xc2, 0x88, 0x79, 0xc2, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xae, 0xf6, 0x54, 0xf9, 0x16, 0x00, 0x00,
}
